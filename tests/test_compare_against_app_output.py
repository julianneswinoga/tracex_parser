import pytest
from typing import Tuple

from parse_app_output import parse_app_txt_output

from tracex_parser.file_parser import parse_tracex_buffer

filename_tups = [
    ('demo_filex.trx', 'tests/demo_filex.txt'),
    ('demo_netx_tcp.trx', 'tests/demo_netx_tcp.txt'),
    ('demo_netx_udp.trx', 'tests/demo_netx_udp.txt'),
    ('demo_threadx.trx', 'tests/demo_threadx.txt'),
]


@pytest.mark.parametrize('filename_tup', filename_tups)
def test_against_app_output(filename_tup: Tuple[str, str]):
    trx_filename, txt_filename = filename_tup

    events, obj_map = parse_tracex_buffer(f'./{trx_filename}')
    app_output_data = parse_app_txt_output(txt_filename)

    if txt_filename == 'tests/demo_netx_udp.txt':
        """
        TODO: I don't know where this event comes from:
          537        00000000000000537000    TX INTERNAL RESUME         (    1)       Interrupt                      
        >>538        00000000000000537012    TX RUNNING                 (    6)       NetX IP Instance (0000F7F0)    
          539        00000000000000538000    TX TIME SLICE              (    5)       Interrupt                      
        It has a strange timestamp (offset by 12? Everything else is on 1000),
        and it DOESN'T APPEAR IN THE RAW FILE!!! WHAT???
        So it must be generated by looking at the surrounding context but I
        can't figure out what that is... So for now lets just ignore it :(
        """
        app_output_data = app_output_data._replace(event_list=[
            e for e in app_output_data.event_list
            if e.event_number != 538
        ])

    assert len(app_output_data.event_list) == len(events)
    for app_event, parsed_event in zip(app_output_data.event_list, events):
        assert app_event.time_stamp == parsed_event.timestamp
        assert app_event.event_type == parsed_event.id
        assert app_event.cur_context_ptr == parsed_event.thread_ptr
        # Txt output sometimes doesn't have the full name? "System Timer Thr"
        assert app_event.cur_context_name in parsed_event.thread_name
        assert app_event.event_infos == parsed_event.raw_args
        assert app_event.priority == parsed_event.thread_priority
